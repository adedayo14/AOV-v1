{% comment %}
  Smart Bundles Block - Displays ML-powered product bundles
  Version 6.0 - Modern style with optional plus separators
{% endcomment %}

{% assign cu_version = '6.0' %}

{% if block.settings.enable_smart_bundles %}
  {% comment %} Calculate manual products count {% endcomment %}
  {% assign manual_products_count = block.settings.manual_bundle_products | size %}
  
  <div class="cart-uplift-smart-bundles"
    data-product-id="{{ product.id }}"
    data-cu-version="{{ cu_version }}"
    data-manual-count="{{ manual_products_count }}"
    data-has-manual="{% if manual_products_count > 0 %}true{% else %}false{% endif %}"
    style="margin-top: {{ block.settings.margin_top | default: 20 }}px; margin-bottom: {{ block.settings.margin_bottom | default: 20 }}px;">
    
    <div id="smart-bundles-container-{{ product.id }}-{{ block.id }}"
      class="smart-bundles-container loading"
      data-bundle-title="{{ block.settings.bundle_title | escape }}"
      data-layout="{{ block.settings.bundle_layout }}"
      data-show-plus="{{ block.settings.show_plus_separator }}"
      data-block-id="{{ block.id }}"
      data-settings="{{ block.settings | json | escape }}">
      
      {% comment %} Loading state {% endcomment %}
      <div class="smart-bundles-loader">
        <div class="spinner"></div>
        <p>Loading recommendations...</p>
      </div>
    </div>
  </div>

  <style>
    /* Core bundle container styles */
    .cart-uplift-smart-bundles {
      width: auto;
      max-width: 100%;
    }

    .smart-bundles-container {
      min-height: 60px;
      position: relative;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }

    /* Loading state */
    .smart-bundles-container.loading .smart-bundles-loader {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 40px 20px;
      gap: 12px;
    }

    .smart-bundles-container:not(.loading) .smart-bundles-loader {
      display: none;
    }

    .spinner {
      width: 24px;
      height: 24px;
      border: 3px solid #f0f0f0;
      border-top: 3px solid #333;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    /* Bundle card styles */
    .cart-uplift-bundle {
      background: #ffffff;
      border-radius: 16px;
      padding: 32px;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);
      margin: 24px 0;
    }

    .cart-uplift-bundle__header {
      margin-bottom: 32px;
      text-align: center;
    }

    .cart-uplift-bundle__title {
      margin: 0;
      font-size: 28px;
      font-weight: 600;
      color: #1a1a1a;
      letter-spacing: -0.5px;
    }

    .cart-uplift-bundle__subtitle {
      margin: 8px 0 0;
      font-size: 16px;
      color: #666;
      font-weight: 400;
    }

    /* Product grid */
    .cu-grid {
      display: flex;
      gap: 24px;
      align-items: flex-start;
      justify-content: center;
      margin-bottom: 32px;
      flex-wrap: wrap;
    }

    /* Product item */
    .cu-item {
      flex: 0 1 200px;
      text-align: center;
      text-decoration: none;
      color: inherit;
      transition: transform 0.2s ease;
    }

    .cu-item:hover {
      transform: translateY(-4px);
    }

    .cu-item--current {
      position: relative;
    }

    .cu-item--current::before {
      content: 'This item:';
      position: absolute;
      top: -24px;
      left: 50%;
      transform: translateX(-50%);
      font-size: 12px;
      font-weight: 500;
      color: #666;
      white-space: nowrap;
    }

    .cu-item__image-wrap {
      width: 180px;
      height: 180px;
      margin: 0 auto 16px;
      border-radius: 12px;
      overflow: hidden;
      background: #f8f8f8;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .cu-item__image {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .cu-item__title {
      font-size: 15px;
      font-weight: 500;
      margin-bottom: 8px;
      line-height: 1.4;
      color: #333;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      min-height: 42px;
    }

    .cu-item__price-group {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      margin-top: 4px;
    }

    .cu-item__price {
      font-size: 18px;
      font-weight: 600;
      color: #1a1a1a;
    }

    .cu-item__price--original {
      font-size: 16px;
      color: #999;
      text-decoration: line-through;
      font-weight: 400;
    }

    /* Variant selector (optional) */
    .cu-item__variant-select {
      width: 100%;
      margin-top: 12px;
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 8px;
      font-size: 14px;
      background: white;
      cursor: pointer;
      transition: border-color 0.2s;
    }

    .cu-item__variant-select:hover {
      border-color: #999;
    }

    /* Plus separator */
    .cu-plus {
      flex: 0 0 auto;
      font-size: 28px;
      font-weight: 300;
      color: #999;
      padding: 0 8px;
      align-self: center;
      margin-top: -40px;
    }

    .smart-bundles-container[data-show-plus="false"] .cu-plus {
      display: none;
    }

    /* Bundle footer */
    .cu-bundle-footer {
      border-top: 1px solid #f0f0f0;
      padding-top: 24px;
      margin-top: 24px;
    }

    /* Total price section */
    .cu-total {
      display: flex;
      justify-content: center;
      align-items: baseline;
      gap: 12px;
      margin-bottom: 24px;
      font-size: 20px;
    }

    .cu-total__label {
      color: #666;
      font-weight: 400;
    }

    .cu-total__price {
      font-size: 28px;
      font-weight: 700;
      color: #1a1a1a;
    }

    .cu-total__price--original {
      font-size: 22px;
      color: #999;
      text-decoration: line-through;
      font-weight: 400;
    }

    /* Savings badge */
    .cu-savings-badge {
      text-align: center;
      margin-bottom: 20px;
    }

    .cu-savings-badge__text {
      display: inline-block;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 6px 16px;
      border-radius: 20px;
      font-size: 14px;
      font-weight: 600;
    }

    /* CTA Button */
    .cart-uplift-bundle__cta {
      width: 100%;
      max-width: 400px;
      margin: 0 auto;
      display: block;
      background: #1a1a1a;
      color: white;
      border: none;
      padding: 16px 32px;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
    }

    .cart-uplift-bundle__cta:hover {
      background: #333;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .cart-uplift-bundle__cta:disabled {
      background: #ccc;
      cursor: not-allowed;
      transform: none;
    }

    .cart-uplift-bundle__cta--loading::after {
      content: '';
      position: absolute;
      top: 50%;
      right: 24px;
      transform: translateY(-50%);
      width: 16px;
      height: 16px;
      border: 2px solid #fff;
      border-top-color: transparent;
      border-radius: 50%;
      animation: spin 0.6s linear infinite;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .cart-uplift-bundle {
        padding: 24px 16px;
      }

      .cart-uplift-bundle__title {
        font-size: 24px;
      }

      .cu-grid {
        gap: 16px;
      }

      .cu-item {
        flex: 0 1 140px;
      }
      
      .cu-item__image-wrap {
        width: 140px;
        height: 140px;
      }

      .cu-plus {
        font-size: 24px;
      }

      .cu-total__price {
        font-size: 24px;
      }
    }

    /* Vertical layout option */
    .cu-layout-vertical .cu-grid {
      flex-direction: column;
      max-width: 600px;
      margin: 0 auto 32px;
    }

    .cu-layout-vertical .cu-item {
      display: flex;
      align-items: center;
      gap: 20px;
      text-align: left;
      flex: 1 1 100%;
      padding: 16px;
      border: 1px solid #f0f0f0;
      border-radius: 12px;
    }

    .cu-layout-vertical .cu-item__image-wrap {
      flex-shrink: 0;
      width: 100px;
      height: 100px;
      margin: 0;
    }

    .cu-layout-vertical .cu-item__content {
      flex: 1;
    }

    .cu-layout-vertical .cu-plus {
      display: none;
    }

    /* Empty state */
    .smart-bundles-empty {
      padding: 60px 20px;
      text-align: center;
      color: #666;
    }

    .smart-bundles-empty p {
      margin: 0;
      font-size: 16px;
    }

    /* Content protection - force visibility when locked */
    .smart-bundles-container[data-cu-lock="manual"] {
      display: block !important;
      visibility: visible !important;
      opacity: 1 !important;
    }

    .smart-bundles-container[data-cu-manual-rendered="true"] {
      display: block !important;
      visibility: visible !important;
    }
  </style>

  <script>
    (function() {
      'use strict';
      
      const CONFIG = {
        version: '{{ cu_version }}',
        productId: {{ product.id | json }},
        containerId: 'smart-bundles-container-{{ product.id }}-{{ block.id }}',
        shopCurrency: {{ shop.currency | json }},
        locale: {{ request.locale | default: shop.locale | json }},
        currentProduct: {
          id: {{ product.id | json }},
          title: {{ product.title | json }},
          price: {{ product.price | json }},
          comparePrice: {{ product.compare_at_price | json }},
          image: {{ product.featured_image | image_url: width: 400 | json }},
          handle: {{ product.handle | json }},
          variants: {{ product.variants | json }}
        }
      };

      // Bundle Manager Class
      class BundleManager {
        constructor(config) {
          this.config = config;
          this.container = null;
          this.settings = null;
          this.initialized = false;
          this.formatter = new Intl.NumberFormat(config.locale, {
            style: 'currency',
            currency: config.shopCurrency
          });
        }

        init() {
          console.log('[SmartBundles v' + this.config.version + '] Initializing for product:', this.config.productId);
          
          this.container = document.getElementById(this.config.containerId);
          if (!this.container) {
            console.error('[SmartBundles] Container not found:', this.config.containerId);
            return;
          }

          this.settings = this.parseSettings();
          this.loadBundles();
        }

        parseSettings() {
          try {
            const settingsJson = this.container.dataset.settings;
            return settingsJson ? JSON.parse(settingsJson) : {};
          } catch (e) {
            console.warn('[SmartBundles] Failed to parse settings:', e);
            return {};
          }
        }

        async loadBundles() {
          try {
            console.log('[SmartBundles v6] Loading bundles...');
            
            // First priority: Manual bundles
            const manualBundles = this.getManualBundles();
            if (manualBundles.length > 0) {
              console.log('[SmartBundles v6] Rendering manual bundles:', manualBundles);
              this.renderBundle(manualBundles[0]);
              return;
            }

            // Second priority: ML bundles from API
            const mlBundles = await this.fetchMLBundles();
            if (mlBundles.length > 0) {
              console.log('[SmartBundles v6] Rendering ML bundles:', mlBundles);
              this.renderBundle(mlBundles[0]);
              return;
            }

            // Third priority: Shopify recommendations
            const recommendations = await this.fetchRecommendations();
            if (recommendations.length > 0) {
              console.log('[SmartBundles v6] Rendering Shopify recommendations as bundle');
              this.renderRecommendationsBundle(recommendations);
              return;
            }

            // No bundles available
            console.log('[SmartBundles v6] No bundles available - showing empty state');
            this.showEmptyState();
          } catch (error) {
            console.error('[SmartBundles v6] Error loading bundles:', error);
            this.showEmptyState();
          }
        }

        getManualBundles() {
          if (!this.settings.manual_bundle_products || !Array.isArray(this.settings.manual_bundle_products)) {
            return [];
          }

          // Always include current product as first item
          const currentProductData = {
            id: this.config.currentProduct.id,
            variant_id: this.config.currentProduct.variants[0].id,
            title: this.config.currentProduct.title,
            price: this.config.currentProduct.price,
            comparePrice: this.config.currentProduct.comparePrice,
            image: this.config.currentProduct.image,
            handle: this.config.currentProduct.handle,
            isCurrentProduct: true
          };

          const manualProducts = this.settings.manual_bundle_products
            .filter(p => p.id !== this.config.currentProduct.id)
            .map(p => ({
              id: p.id,
              variant_id: p.variants && p.variants[0] ? p.variants[0].id : p.id,
              title: p.title,
              price: p.price,
              comparePrice: p.compare_at_price,
              image: p.featured_image,
              handle: p.handle,
              variants: p.variants,
              isCurrentProduct: false
            }));

          const bundleProducts = [currentProductData, ...manualProducts];
          const totalPrice = bundleProducts.reduce((sum, p) => sum + (p.price || 0), 0);
          const totalComparePrice = bundleProducts.reduce((sum, p) => sum + (p.comparePrice || p.price || 0), 0);
          
          // Calculate discount percentage
          const discountPercent = totalComparePrice > totalPrice 
            ? Math.round(((totalComparePrice - totalPrice) / totalComparePrice) * 100)
            : 0;

          return [{
            id: 'manual-bundle',
            name: this.settings.bundle_title || 'Complete your setup',
            subtitle: this.settings.bundle_subtitle,
            products: bundleProducts,
            bundle_price: totalPrice,
            regular_total: totalComparePrice,
            discount_percent: discountPercent
          }];
        }

        async fetchMLBundles() {
          try {
            const response = await fetch('/apps/cart-uplift/api/bundles?product_id=' + this.config.productId + '&context=product', {
              headers: { 'Accept': 'application/json' }
            });
            
            if (!response.ok) return [];
            
            const data = await response.json();
            
            if (data && data.bundles && Array.isArray(data.bundles)) {
              return data.bundles.map(bundle => {
                // Ensure current product is marked and is first
                const hasCurrentProduct = bundle.products.some(p => p.id === this.config.currentProduct.id);
                
                if (!hasCurrentProduct) {
                  bundle.products = [{
                    id: this.config.currentProduct.id,
                    variant_id: this.config.currentProduct.variants[0].id,
                    title: this.config.currentProduct.title,
                    price: this.config.currentProduct.price,
                    comparePrice: this.config.currentProduct.comparePrice,
                    image: this.config.currentProduct.image,
                    isCurrentProduct: true
                  }, ...bundle.products];
                  
                  bundle.regular_total = (bundle.regular_total || 0) + (this.config.currentProduct.comparePrice || this.config.currentProduct.price);
                  bundle.bundle_price = (bundle.bundle_price || 0) + this.config.currentProduct.price;
                } else {
                  // Mark the current product
                  bundle.products = bundle.products.map(p => ({
                    ...p,
                    isCurrentProduct: p.id === this.config.currentProduct.id
                  }));
                  
                  // Ensure current product is first
                  bundle.products.sort((a, b) => {
                    if (a.isCurrentProduct) return -1;
                    if (b.isCurrentProduct) return 1;
                    return 0;
                  });
                }
                
                return bundle;
              });
            }
            
            return [];
          } catch (error) {
            console.warn('[SmartBundles] Failed to fetch ML bundles:', error);
            return [];
          }
        }

        async fetchRecommendations() {
          try {
            const response = await fetch('/recommendations/products.json?product_id=' + this.config.productId + '&limit=2');
            if (!response.ok) return [];
            
            const data = await response.json();
            const products = Array.isArray(data) ? data : (data.products || []);
            
            // Add current product as first item
            return [{
              id: this.config.currentProduct.id,
              title: this.config.currentProduct.title,
              price: this.config.currentProduct.price / 100,
              compare_at_price: this.config.currentProduct.comparePrice ? this.config.currentProduct.comparePrice / 100 : null,
              featured_image: this.config.currentProduct.image,
              handle: this.config.currentProduct.handle,
              variants: this.config.currentProduct.variants,
              isCurrentProduct: true
            }, ...products.slice(0, 2).map(p => ({ ...p, isCurrentProduct: false }))];
          } catch (error) {
            console.warn('[SmartBundles] Failed to fetch recommendations:', error);
            return [];
          }
        }

        renderBundle(bundle) {
          console.log('[SmartBundles v6] Rendering bundle:', bundle);
          
          this.container.classList.remove('loading');
          this.container.classList.add('loaded');
          
          // Prevent external scripts from overriding this content
          this.container.dataset.cuLock = 'manual';
          this.container.dataset.cuManualRendered = 'true';
          window.CartUpliftManualGuard = true;
          
          console.log('[SmartBundles v6] Container protection flags set');
          
          const layout = this.settings.bundle_layout || 'horizontal';
          this.container.classList.add('cu-layout-' + layout);
          
          const showPlus = this.settings.show_plus_separator !== false;
          
          const itemsHtml = bundle.products.map((product, index) => {
            const priceInDollars = product.price / 100;
            const comparePriceInDollars = product.comparePrice ? product.comparePrice / 100 : null;
            
            const priceHtml = comparePriceInDollars && comparePriceInDollars > priceInDollars
              ? `<div class="cu-item__price-group">
                  <span class="cu-item__price">${this.formatter.format(priceInDollars)}</span>
                  <span class="cu-item__price--original">${this.formatter.format(comparePriceInDollars)}</span>
                </div>`
              : `<div class="cu-item__price-group">
                  <span class="cu-item__price">${this.formatter.format(priceInDollars)}</span>
                </div>`;
            
            const itemContent = layout === 'vertical' 
              ? `<div class="cu-item__image-wrap">
                  <img class="cu-item__image" 
                    src="${product.image || this.getPlaceholderImage(product.title)}" 
                    alt="${product.title || ''}"
                    loading="lazy">
                </div>
                <div class="cu-item__content">
                  <div class="cu-item__title">${product.title || ''}</div>
                  ${priceHtml}
                  ${product.variants && product.variants.length > 1 && !product.isCurrentProduct ? this.renderVariantSelector(product) : ''}
                </div>`
              : `<div class="cu-item__image-wrap">
                  <img class="cu-item__image" 
                    src="${product.image || this.getPlaceholderImage(product.title)}" 
                    alt="${product.title || ''}"
                    loading="lazy">
                </div>
                <div class="cu-item__title">${product.title || ''}</div>
                ${priceHtml}
                ${product.variants && product.variants.length > 1 && !product.isCurrentProduct ? this.renderVariantSelector(product) : ''}`;
            
            const itemHtml = product.isCurrentProduct
              ? `<div class="cu-item cu-item--current" data-product-id="${product.id}">${itemContent}</div>`
              : `<a class="cu-item" href="/products/${product.handle || ''}" data-product-id="${product.id}">${itemContent}</a>`;
            
            const plusSeparator = showPlus && index < bundle.products.length - 1 
              ? '<div class="cu-plus">+</div>' 
              : '';
            
            return itemHtml + plusSeparator;
          }).join('');
          
          const bundlePriceInDollars = bundle.bundle_price / 100;
          const regularPriceInDollars = bundle.regular_total / 100;
          const hasDiscount = bundle.discount_percent > 0;
          
          const savingsBadge = hasDiscount 
            ? `<div class="cu-savings-badge">
                <span class="cu-savings-badge__text">Save ${bundle.discount_percent}%</span>
              </div>`
            : '';
          
          const totalSection = regularPriceInDollars > bundlePriceInDollars
            ? `<div class="cu-total">
                <span class="cu-total__label">Total Price:</span>
                <span class="cu-total__price">${this.formatter.format(bundlePriceInDollars)}</span>
                <span class="cu-total__price--original">${this.formatter.format(regularPriceInDollars)}</span>
              </div>`
            : `<div class="cu-total">
                <span class="cu-total__label">Total Price:</span>
                <span class="cu-total__price">${this.formatter.format(bundlePriceInDollars)}</span>
              </div>`;
          
          const subtitle = bundle.subtitle 
            ? `<p class="cart-uplift-bundle__subtitle">${bundle.subtitle}</p>`
            : '';
          
          const bundleHtml = `
            <div class="cart-uplift-bundle">
              <div class="cart-uplift-bundle__content">
                <div class="cart-uplift-bundle__header">
                  <h3 class="cart-uplift-bundle__title">${bundle.name || this.settings.bundle_title || 'Get the Collection!'}</h3>
                  ${subtitle}
                </div>
                <div class="cu-grid">${itemsHtml}</div>
                <div class="cu-bundle-footer">
                  ${savingsBadge}
                  ${totalSection}
                  <button class="cart-uplift-bundle__cta" data-bundle-id="${bundle.id}">
                    ${hasDiscount ? 'Add Bundle & Save ' + bundle.discount_percent + '%' : 'Add to Cart'}
                  </button>
                </div>
              </div>
            </div>
          `;
          
          this.container.innerHTML = bundleHtml;
          console.log('[SmartBundles v6] Bundle HTML rendered to container');
          
          this.attachEventListeners(bundle);
          
          // Protect content from being cleared by other scripts
          this.protectContent(bundle);
          
          console.log('[SmartBundles v6] Bundle render complete with protection');
        }

        protectContent(bundle) {
          // Force visibility
          this.container.style.setProperty('display', 'block', 'important');
          this.container.style.setProperty('visibility', 'visible', 'important');
          this.container.style.setProperty('opacity', '1', 'important');
          
          // Store bundle data for restoration
          this.container.dataset.bundleCache = JSON.stringify(bundle);
          
          // Set up MutationObserver to restore content if cleared
          if (!this.container.__cuProtectionObserver) {
            const observer = new MutationObserver(() => {
              try {
                const hasContent = !!this.container.querySelector('.cart-uplift-bundle');
                const isHidden = this.container.hidden || 
                  window.getComputedStyle(this.container).display === 'none';
                
                if (isHidden) {
                  console.warn('[SmartBundles] Container hidden - forcing visible');
                  this.container.hidden = false;
                  this.container.style.setProperty('display', 'block', 'important');
                  this.container.style.setProperty('visibility', 'visible', 'important');
                  this.container.style.setProperty('opacity', '1', 'important');
                }
                
                if (!hasContent && this.container.dataset.cuLock === 'manual') {
                  console.warn('[SmartBundles] Content cleared - restoring bundle');
                  const cached = JSON.parse(this.container.dataset.bundleCache || '{}');
                  if (cached.id) {
                    this.renderBundle(cached);
                  }
                }
              } catch (e) {
                console.warn('[SmartBundles] Protection observer error:', e);
              }
            });
            
            observer.observe(this.container, { 
              childList: true, 
              attributes: true, 
              attributeFilter: ['style', 'hidden', 'class'] 
            });
            
            this.container.__cuProtectionObserver = observer;
          }
        }

        renderVariantSelector(product) {
          if (!product.variants || product.variants.length <= 1) return '';
          
          const options = product.variants.map(v => 
            `<option value="${v.id}">${v.title}</option>`
          ).join('');
          
          return `<select class="cu-item__variant-select" data-product-id="${product.id}">
            ${options}
          </select>`;
        }

        renderRecommendationsBundle(products) {
          // Create a pseudo-bundle from recommendations
          const totalPrice = products.reduce((sum, p) => sum + (p.price || 0), 0);
          const totalComparePrice = products.reduce((sum, p) => sum + (p.compare_at_price || p.price || 0), 0);
          const discountPercent = totalComparePrice > totalPrice 
            ? Math.round(((totalComparePrice - totalPrice) / totalComparePrice) * 100)
            : 10; // Default 10% discount for recommendations bundle
          
          const bundle = {
            id: 'recommendations-bundle',
            name: this.settings.bundle_title || 'Save 10%, Make it a Bundle',
            subtitle: 'Frequently bought together',
            products: products.map(p => ({
              ...p,
              price: (p.price || 0) * 100, // Convert to cents for consistency
              comparePrice: p.compare_at_price ? p.compare_at_price * 100 : null,
              image: p.featured_image,
              isCurrentProduct: p.isCurrentProduct
            })),
            bundle_price: totalPrice * 100 * 0.9, // Apply 10% discount
            regular_total: totalComparePrice * 100,
            discount_percent: discountPercent
          };
          
          this.renderBundle(bundle);
        }

        attachEventListeners(bundle) {
          const button = this.container.querySelector('[data-bundle-id]');
          if (!button) return;
          
          button.addEventListener('click', async (e) => {
            e.preventDefault();
            button.disabled = true;
            button.classList.add('cart-uplift-bundle__cta--loading');
            
            try {
              // Get selected variants
              const items = bundle.products.map(p => {
                const variantSelect = this.container.querySelector(`[data-product-id="${p.id}"] select`);
                const variantId = variantSelect ? variantSelect.value : (p.variant_id || p.id);
                
                return {
                  id: parseInt(variantId, 10),
                  quantity: 1
                };
              }).filter(item => !isNaN(item.id));
              
              if (items.length === 0) {
                throw new Error('No valid products in bundle');
              }
              
              const response = await fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json'
                },
                body: JSON.stringify({ items })
              });
              
              if (!response.ok) {
                throw new Error('Failed to add bundle to cart');
              }
              
              // Success feedback
              button.textContent = '✓ Added to Cart';
              
              // Trigger cart update events
              document.dispatchEvent(new CustomEvent('cart:updated'));
              
              if (window.Shopify && window.Shopify.onItemAdded) {
                window.Shopify.onItemAdded(await response.json());
              }
              
              // Reset button after delay
              setTimeout(() => {
                button.textContent = bundle.discount_percent > 0 
                  ? 'Add Bundle & Save ' + bundle.discount_percent + '%'
                  : 'Add to Cart';
                button.disabled = false;
              }, 2000);
              
            } catch (error) {
              console.error('[SmartBundles] Error adding bundle to cart:', error);
              button.textContent = 'Failed - Try Again';
              setTimeout(() => {
                button.textContent = bundle.discount_percent > 0 
                  ? 'Add Bundle & Save ' + bundle.discount_percent + '%'
                  : 'Add to Cart';
                button.disabled = false;
              }, 2000);
            } finally {
              button.classList.remove('cart-uplift-bundle__cta--loading');
            }
          });
        }

        showEmptyState() {
          this.container.classList.remove('loading');
          this.container.classList.add('loaded', 'empty');
          this.container.innerHTML = `
            <div class="smart-bundles-empty">
              <p>No recommendations available at this time.</p>
            </div>
          `;
        }

        getPlaceholderImage(title) {
          const colors = ['#f8f8f8'];
          const color = colors[0];
          const shortTitle = (title || 'Product').slice(0, 10);
          
          return 'data:image/svg+xml,' + encodeURIComponent(
            `<svg xmlns='http://www.w3.org/2000/svg' width='400' height='400'>
              <rect width='100%' height='100%' fill='${color}'/>
              <text x='50%' y='50%' dominant-baseline='middle' text-anchor='middle' 
                fill='#999' font-family='Arial' font-size='14'>${shortTitle}</text>
            </svg>`
          );
        }
      }

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          const manager = new BundleManager(CONFIG);
          manager.init();
          
          // Signal that Smart Bundles v6 is active
          window.CartUpliftV6Active = true;
          window.CartUpliftHasSmartBundleBlock = true;
        });
      } else {
        const manager = new BundleManager(CONFIG);
        manager.init();
        
        // Signal that Smart Bundles v6 is active
        window.CartUpliftV6Active = true;
        window.CartUpliftHasSmartBundleBlock = true;
      }
    })();
  </script>
{% endif %}

{% schema %}
{
  "name": "Smart Bundles",
  "target": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_smart_bundles",
      "label": "Enable Smart Bundles",
      "default": true,
      "info": "Show AI-powered product bundles on this product page"
    },
    {
      "type": "text",
      "id": "bundle_title",
      "label": "Bundle Title",
      "default": "Complete your setup",
      "info": "Title shown above the bundle recommendations"
    },
    {
      "type": "text",
      "id": "bundle_subtitle",
      "label": "Bundle Subtitle",
      "info": "Optional subtitle shown below the title"
    },
    {
      "type": "select",
      "id": "bundle_layout",
      "label": "Bundle Layout",
      "options": [
        {
          "value": "horizontal",
          "label": "Horizontal (side by side)"
        },
        {
          "value": "vertical",
          "label": "Vertical (stacked)"
        }
      ],
      "default": "horizontal"
    },
    {
      "type": "checkbox",
      "id": "show_plus_separator",
      "label": "Show Plus Separators",
      "default": true,
      "info": "Show + symbols between items to indicate bundle"
    },
    {
      "type": "product_list",
      "id": "manual_bundle_products",
      "label": "Manual Fallback Bundle",
      "limit": 4,
      "info": "Select products for a manual bundle if no ML recommendations are found"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Top margin",
      "default": 20
    },
    {
      "type": "range",
      "id": "margin_bottom", 
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Bottom margin",
      "default": 20
    }
  ]
}
{% endschema %}
        }