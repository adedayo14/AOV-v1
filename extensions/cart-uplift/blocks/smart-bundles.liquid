{% comment %}
  Smart Bundles Block - Displays ML-powered product bundles.
  This block should be placed on product pages where you want bundles to appear.
  The associated 'bundle-renderer.js' asset will handle fetching and rendering.
{% endcomment %}

{% if block.settings.enable_smart_bundles %}
<div class="cart-uplift-smart-bundles" 
     data-product-id="{{ product.id }}"
     data-bundle-settings='{{ block.settings | json }}'
     style="margin: {{ block.settings.margin_top }}px 0 {{ block.settings.margin_bottom }}px 0;">
  
  {% comment %} Smart Bundles will be dynamically loaded here {% endcomment %}
  <div id="smart-bundles-container-{{ product.id }}" class="smart-bundles-loading">
    <div class="smart-bundles-placeholder" style="text-align: center; padding: 20px; color: #666;">
      <div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #f3f3f3; border-top: 2px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
  <p style="margin-top: 10px; font-size: 14px;">Loading smart bundles... v4.2.0-{{ "now" | date: "%Y%m%d%H%M%S" }}</p>
    </div>
  </div>
</div>

<link rel="stylesheet" href="{{ 'bundles.css' | asset_url }}">

<style>
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.cart-uplift-smart-bundles {
  width: 100%;
  max-width: 100%;
}

.smart-bundles-loading {
  min-height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.smart-bundles-placeholder {
  opacity: 0.7;
}

/* Hide loading when bundles are loaded */
.smart-bundles-loaded .smart-bundles-placeholder {
  display: none;
}
</style>

<script>
// Initialize Smart Bundles for this product
console.log('[SmartBundles] Script block executing for product {{ product.id | json }}');
console.log('[SmartBundles] Available window globals:', {
  BundleRenderer: typeof window.BundleRenderer,
  CartUplift: typeof window.CartUplift,
  CartUpliftSettings: typeof window.CartUpliftSettings
});

// Execute immediately, don't wait for DOM
const productId = {{ product.id | json }};
// Pass store currency and locale into global settings for currency-safe formatting
try {
  window.CartUpliftSettings = Object.assign({}, window.CartUpliftSettings || {}, {
    shopCurrency: {{ shop.currency | json }},
  });
  // Also set document language if theme hasn't
  if (!document.documentElement.lang) {
    document.documentElement.lang = {{ request.locale | default: shop.locale | json }};
  }
} catch (_) {}
console.log('[SmartBundles] Product ID:', productId);

// Signal globally that a theme Smart Bundles block is present on this page.
// This helps the renderer avoid auto-placement and race conditions.
try {
  window.CartUpliftHasSmartBundleBlock = true;
} catch (_) {}

// Test bundle removed

// Check if container exists immediately
const bundleContainer = document.getElementById('smart-bundles-container-' + productId);
console.log('[SmartBundles] Container element:', bundleContainer);

if (!bundleContainer) {
  console.error('[SmartBundles] Container not found immediately, will retry on DOM ready');
}

document.addEventListener('DOMContentLoaded', function() {
  console.log('[SmartBundles] DOM Content Loaded event fired');
  const bundleContainer = document.getElementById('smart-bundles-container-' + productId);

  console.log('[SmartBundles] DOM loaded, productId:', productId, 'container:', bundleContainer);

  if (!bundleContainer) {
    console.error('[SmartBundles] Bundle container not found!');
    return;
  }

  const tryInit = (attempt = 1) => {
    if (!bundleContainer) {
      console.error('[SmartBundles] Bundle container not found');
      return;
    }

    console.log('[SmartBundles] Attempt', attempt, 'to initialize bundles for product:', productId);

    // Preferred path via CartUplift facade
    if (typeof window.CartUplift !== 'undefined' && window.CartUplift.initSmartBundles) {
      console.log('[SmartBundles] Using CartUplift facade');
      window.CartUplift.initSmartBundles(productId, bundleContainer);
      return;
    }

    // Direct path if renderer is already present
    if (window.BundleRenderer) {
      console.log('[SmartBundles] BundleRenderer class found, initializing...');
      if (!window.cartUpliftBundleRenderer) {
        try {
          const settings = window.CartUpliftSettings || window.cartUpliftSettings || {};
          console.log('[SmartBundles] Creating BundleRenderer with settings:', settings);
          window.cartUpliftBundleRenderer = new window.BundleRenderer(settings);
          console.log('[SmartBundles] BundleRenderer instance created successfully');
        } catch (e) {
          console.error('[SmartBundles] Error creating BundleRenderer:', e);
          return;
        }
      }
      if (window.cartUpliftBundleRenderer && typeof window.cartUpliftBundleRenderer.initProductPage === 'function') {
        console.log('[SmartBundles] Calling initProductPage for product:', productId);
        try {
          window.cartUpliftBundleRenderer.initProductPage(productId, bundleContainer);
          console.log('[SmartBundles] initProductPage call completed');
          return;
        } catch (e) {
          console.error('[SmartBundles] Error calling initProductPage:', e);
        }
      } else {
        console.warn('[SmartBundles] BundleRenderer missing initProductPage method');
      }
    } else {
      console.log('[SmartBundles] BundleRenderer class not found, waiting... (attempt ' + attempt + ')');
      console.log('[SmartBundles] Available globals:', {
        CartUplift: typeof window.CartUplift,
        CartUpliftAssets: window.CartUpliftAssets,
        CartUpliftSettings: typeof window.CartUpliftSettings,
        BundleRenderer: typeof window.BundleRenderer
      });
      
      // Try to load the script if we have the asset URL but no script tag
      if (window.CartUpliftAssets && window.CartUpliftAssets.bundleRenderer && attempt === 1) {
        console.log('[SmartBundles] Loading bundle renderer from app-embed asset URL...');
        const existing = document.querySelector('script[data-cartuplift="bundle-renderer"]');
        if (!existing) {
          const script = document.createElement('script');
          script.src = window.CartUpliftAssets.bundleRenderer;
          script.defer = true;
          script.setAttribute('data-cartuplift', 'bundle-renderer');
          script.onload = () => console.log('[SmartBundles] Bundle renderer script loaded successfully');
          script.onerror = () => console.error('[SmartBundles] Failed to load bundle renderer script');
          document.head.appendChild(script);
          console.log('[SmartBundles] Bundle renderer script added to DOM');
        } else {
          console.log('[SmartBundles] Bundle renderer script already exists in DOM');
        }
      }
    }

    if (attempt <= 6) {
      setTimeout(() => tryInit(attempt + 1), 500);
    } else {
  console.log('[SmartBundles] All attempts failed, trying direct API call before showing empty state...');

  // Direct API fallback
      fetch('/apps/cart-uplift/api/bundles?product_id=' + productId + '&context=product', {
        headers: { 'Accept': 'application/json' }
      })
      .then(response => {
        console.log('[SmartBundles] Direct API response status:', response.status);
        if (!response.ok) {
          throw new Error('API response not ok: ' + response.status);
        }
        return response.json();
      })
      .then(data => {
        console.log('[SmartBundles] Direct API data:', data);
        if (data.bundles && data.bundles.length > 0) {
          // Manually render bundles since BundleRenderer failed
          renderBundlesManually(data.bundles, bundleContainer);
        } else {
          console.log('[SmartBundles] No bundles from API, showing empty state');
          showNoBundlesMessage(bundleContainer);
        }
      })
      .catch(error => {
        console.error('[SmartBundles] Direct API error:', error);
        console.log('[SmartBundles] API failed, showing empty state');
        showNoBundlesMessage(bundleContainer);
      });
    }
  };

  // Test bundles to ensure something always shows
  // Test bundle renderer removed

  // Manual bundle rendering fallback
  function renderBundlesManually(bundles, container) {
    console.log('[SmartBundles] Manually rendering', bundles.length, 'bundles');
    container.classList.add('smart-bundles-loaded');
    container.innerHTML = '';
    // Choose best bundle (max discount, then savings)
    const best = (bundles || []).slice().sort((a,b) => (b.discount_percent||0) - (a.discount_percent||0) || (b.savings_amount||0) - (a.savings_amount||0))[0];
    if (!best) { showNoBundlesMessage(container); return; }
    window.__cuManualBundles = [best];

    const gridItems = (best.products||[]).map((p, idx) => {
      const img = p.image || 'https://via.placeholder.com/120';
      const title = p.title || '';
      const price = typeof p.price === 'number' ? new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(p.price) : '';
      const variantTitle = p.variant_title && p.variant_title !== 'Default Title' ? `<div class="cart-uplift-product__variant">${p.variant_title}</div>` : '';
      const pills = Array.isArray(p.options) ? p.options.map(o => `<span class="cu-pill" title="${(o?.name||'')}: ${(o?.value||'')}">${(o?.value||'')}</span>`).join('') : '';
      return `
      <div class="cu-item" data-index="${idx}">
        <div class="cu-item__image-wrap"><img class="cu-item__image" src="${img}" alt="${title}"></div>
        <div class="cu-item__title">${title}</div>
        <div class="cu-item__price">${price}</div>
        <div class="cu-item__options">${variantTitle}${pills}</div>
      </div>`;
    }).join('');

    const currencyFmt = (v) => new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(v);
    const total = currencyFmt(best.bundle_price || (best.products||[]).reduce((s,p)=>s+(p.price||0),0));
    const regular = typeof best.regular_total === 'number' ? currencyFmt(best.regular_total) : '';
    const savePct = best.discount_percent != null ? best.discount_percent : '';
    const saveAmt = typeof best.savings_amount === 'number' ? currencyFmt(best.savings_amount) : '';
    const saveText = savePct && saveAmt ? `${savePct}% (${saveAmt})` : (savePct || '');

    const bundleHtml = `
      <div class="cart-uplift-bundle manual-render">
        <div class="cart-uplift-bundle__content">
          <div class="cart-uplift-bundle__header">
            <h3 class="cart-uplift-bundle__title">${best.name || 'Bundle Deal'}</h3>
          </div>
          <div class="cu-grid">${gridItems}</div>
          <div class="cu-total">
            <div class="cu-total__label">Total price</div>
            <div class="cu-total__values">
              <span class="cu-total__price">${total}</span>
              ${regular ? `<span class="cu-total__regular">${regular}</span>` : ''}
              ${saveText ? `<span class="cu-total__save">You save ${saveText}</span>` : ''}
            </div>
          </div>
          <div class="cart-uplift-bundle__actions">
            <button class="cart-uplift-bundle__cta" data-cu-bundle-id="${best.id}">Add bundle — Save ${best.discount_percent || 0}%</button>
          </div>
        </div>
      </div>`;
    container.innerHTML = bundleHtml;

    const btn = container.querySelector('.cart-uplift-bundle__cta');
    if (btn) {
      btn.addEventListener('click', async () => {
        const bundle = (window.__cuManualBundles || [])[0];
        if (!bundle) return;
        try {
          const items = (bundle.products||[]).map(p => ({ id: p.variant_id || p.id, quantity: 1 })).filter(i => !!i.id);
          // Try batch add
          let ok = true;
          try {
            const r = await fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, credentials: 'same-origin', body: JSON.stringify({ items }) });
            if (!r.ok) throw new Error('batch failed');
          } catch (_) {
            ok = false;
          }
          if (!ok) {
            // Fallback sequential
            for (const it of items) {
              const r = await fetch('/cart/add.js', { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' }, credentials: 'same-origin', body: JSON.stringify({ id: it.id, quantity: it.quantity||1 }) });
              if (!r.ok) throw new Error('add failed');
            }
          }
          if (bundle.discount_code) {
            try { await fetch('/discount/' + bundle.discount_code, { method: 'POST' }); } catch(_) {}
          }
          alert('Bundle added to cart');
        } catch (err) {
          console.error('[SmartBundles] Manual add failed:', err);
          // Ultimate fallback: attempt a form POST for the first item to at least add something
          try {
            const first = (bundle.products||[])[0];
            const vid = first?.variant_id || first?.id;
            if (vid) {
              const form = document.createElement('form');
              form.method = 'POST';
              form.action = '/cart/add';
              form.style.display = 'none';
              const idInput = document.createElement('input');
              idInput.name = 'id'; idInput.value = String(vid);
              const qtyInput = document.createElement('input');
              qtyInput.name = 'quantity'; qtyInput.value = '1';
              form.appendChild(idInput); form.appendChild(qtyInput);
              document.body.appendChild(form);
              form.submit();
              return;
            }
          } catch(_) {}
          alert('Failed to add bundle, please try again');
        }
      });
    }
  }

  function showNoBundlesMessage(container) {
    container.classList.add('smart-bundles-loaded');
    container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No bundles available for this product.</p>';
  }

  function showErrorMessage(container, error) {
    container.classList.add('smart-bundles-loaded');
    container.innerHTML = `<p style="text-align: center; color: #d73027; padding: 20px;">Unable to load bundles: ${error}</p>`;
  }

  // Legacy no-op kept for backward compatibility
  window.addBundleToCart = function(bundleId) {
    console.log('[SmartBundles] Deprecated addBundleToCart called for', bundleId);
  };

  tryInit();
});
</script>

{%- comment -%}
  Ensure the bundle renderer script is available on product pages using this block.
  This is a safe fallback in case the app-embed delayed loader hasn’t run yet.
{%- endcomment -%}
<script src="{{ 'bundle-renderer.js' | asset_url }}" defer></script>
{% endif %}

{% schema %}
{
  "name": "Smart Bundles",
  "target": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_smart_bundles",
      "label": "Enable Smart Bundles",
      "default": true,
      "info": "Show AI-powered product bundles on this product page"
    },
    {
      "type": "text",
      "id": "bundle_title",
      "label": "Bundle Title",
      "default": "Complete your setup",
      "info": "Title shown above the bundle recommendations"
    },
    {
      "type": "select",
      "id": "bundle_layout",
      "label": "Bundle Layout",
      "options": [
        {
          "value": "horizontal",
          "label": "Horizontal (side by side)"
        },
        {
          "value": "vertical",
          "label": "Vertical (stacked)"
        }
      ],
      "default": "horizontal"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Top margin",
      "default": 20
    },
    {
      "type": "range",
      "id": "margin_bottom", 
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Bottom margin",
      "default": 20
    }
  ]
}
{% endschema %}
