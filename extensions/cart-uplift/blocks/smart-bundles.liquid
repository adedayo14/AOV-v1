{% comment %}
  Smart Bundles Block - Displays ML-powered product bundles.
  This block should be placed on product pages where you want bundles to appear.
  The associated 'bundle-renderer.js' asset will handle fetching and rendering.
{% endcomment %}

{% if block.settings.enable_smart_bundles %}
<div class="cart-uplift-smart-bundles" 
     data-product-id="{{ product.id }}"
     data-bundle-settings='{{ block.settings | json }}'
     style="margin: {{ block.settings.margin_top }}px 0 {{ block.settings.margin_bottom }}px 0;">
  
  {% comment %} Smart Bundles will be dynamically loaded here {% endcomment %}
  <div id="smart-bundles-container-{{ product.id }}" class="smart-bundles-loading">
    <div class="smart-bundles-placeholder" style="text-align: center; padding: 20px; color: #666;">
      <div style="display: inline-block; width: 20px; height: 20px; border: 2px solid #f3f3f3; border-top: 2px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
  <p style="margin-top: 10px; font-size: 14px;">Loading smart bundles... v4.1.8-{{ "now" | date: "%Y%m%d%H%M%S" }}</p>
    </div>
  </div>
</div>

<link rel="stylesheet" href="{{ 'bundles.css' | asset_url }}">

<style>
@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.cart-uplift-smart-bundles {
  width: 100%;
  max-width: 100%;
}

.smart-bundles-loading {
  min-height: 60px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.smart-bundles-placeholder {
  opacity: 0.7;
}

/* Hide loading when bundles are loaded */
.smart-bundles-loaded .smart-bundles-placeholder {
  display: none;
}
</style>

<script>
// Initialize Smart Bundles for this product
console.log('[SmartBundles] Script block executing for product {{ product.id | json }}');
console.log('[SmartBundles] Available window globals:', {
  BundleRenderer: typeof window.BundleRenderer,
  CartUplift: typeof window.CartUplift,
  CartUpliftSettings: typeof window.CartUpliftSettings
});

// Execute immediately, don't wait for DOM
const productId = {{ product.id | json }};
console.log('[SmartBundles] Product ID:', productId);

// Test bundle removed

// Check if container exists immediately
const bundleContainer = document.getElementById('smart-bundles-container-' + productId);
console.log('[SmartBundles] Container element:', bundleContainer);

if (!bundleContainer) {
  console.error('[SmartBundles] Container not found immediately, will retry on DOM ready');
}

document.addEventListener('DOMContentLoaded', function() {
  console.log('[SmartBundles] DOM Content Loaded event fired');
  const bundleContainer = document.getElementById('smart-bundles-container-' + productId);

  console.log('[SmartBundles] DOM loaded, productId:', productId, 'container:', bundleContainer);

  if (!bundleContainer) {
    console.error('[SmartBundles] Bundle container not found!');
    return;
  }

  const tryInit = (attempt = 1) => {
    if (!bundleContainer) {
      console.error('[SmartBundles] Bundle container not found');
      return;
    }

    console.log('[SmartBundles] Attempt', attempt, 'to initialize bundles for product:', productId);

    // Preferred path via CartUplift facade
    if (typeof window.CartUplift !== 'undefined' && window.CartUplift.initSmartBundles) {
      console.log('[SmartBundles] Using CartUplift facade');
      window.CartUplift.initSmartBundles(productId, bundleContainer);
      return;
    }

    // Direct path if renderer is already present
    if (window.BundleRenderer) {
      console.log('[SmartBundles] BundleRenderer class found, initializing...');
      if (!window.cartUpliftBundleRenderer) {
        try {
          const settings = window.CartUpliftSettings || window.cartUpliftSettings || {};
          console.log('[SmartBundles] Creating BundleRenderer with settings:', settings);
          window.cartUpliftBundleRenderer = new window.BundleRenderer(settings);
          console.log('[SmartBundles] BundleRenderer instance created successfully');
        } catch (e) {
          console.error('[SmartBundles] Error creating BundleRenderer:', e);
          return;
        }
      }
      if (window.cartUpliftBundleRenderer && typeof window.cartUpliftBundleRenderer.initProductPage === 'function') {
        console.log('[SmartBundles] Calling initProductPage for product:', productId);
        try {
          window.cartUpliftBundleRenderer.initProductPage(productId, bundleContainer);
          console.log('[SmartBundles] initProductPage call completed');
          return;
        } catch (e) {
          console.error('[SmartBundles] Error calling initProductPage:', e);
        }
      } else {
        console.warn('[SmartBundles] BundleRenderer missing initProductPage method');
      }
    } else {
      console.log('[SmartBundles] BundleRenderer class not found, waiting... (attempt ' + attempt + ')');
      console.log('[SmartBundles] Available globals:', {
        CartUplift: typeof window.CartUplift,
        CartUpliftAssets: window.CartUpliftAssets,
        CartUpliftSettings: typeof window.CartUpliftSettings,
        BundleRenderer: typeof window.BundleRenderer
      });
      
      // Try to load the script if we have the asset URL but no script tag
      if (window.CartUpliftAssets && window.CartUpliftAssets.bundleRenderer && attempt === 1) {
        console.log('[SmartBundles] Loading bundle renderer from app-embed asset URL...');
        const existing = document.querySelector('script[data-cartuplift="bundle-renderer"]');
        if (!existing) {
          const script = document.createElement('script');
          script.src = window.CartUpliftAssets.bundleRenderer;
          script.defer = true;
          script.setAttribute('data-cartuplift', 'bundle-renderer');
          script.onload = () => console.log('[SmartBundles] Bundle renderer script loaded successfully');
          script.onerror = () => console.error('[SmartBundles] Failed to load bundle renderer script');
          document.head.appendChild(script);
          console.log('[SmartBundles] Bundle renderer script added to DOM');
        } else {
          console.log('[SmartBundles] Bundle renderer script already exists in DOM');
        }
      }
    }

    if (attempt <= 6) {
      setTimeout(() => tryInit(attempt + 1), 500);
    } else {
      console.log('[SmartBundles] All attempts failed, trying direct API call...');
      
      // Final attempt: Manual test bundles as absolute fallback
      setTimeout(() => {
        console.log('[SmartBundles] Rendering test bundles as final fallback...');
        renderTestBundles(bundleContainer);
      }, 1000);
      
      // Direct API fallback
      fetch('/apps/cart-uplift/api/bundles?product_id=' + productId + '&context=product', {
        headers: { 'Accept': 'application/json' }
      })
      .then(response => {
        console.log('[SmartBundles] Direct API response status:', response.status);
        if (!response.ok) {
          throw new Error('API response not ok: ' + response.status);
        }
        return response.json();
      })
      .then(data => {
        console.log('[SmartBundles] Direct API data:', data);
        if (data.bundles && data.bundles.length > 0) {
          // Manually render bundles since BundleRenderer failed
          renderBundlesManually(data.bundles, bundleContainer);
        } else {
          console.log('[SmartBundles] No bundles from API, showing test bundles');
          renderTestBundles(bundleContainer);
        }
      })
      .catch(error => {
        console.error('[SmartBundles] Direct API error:', error);
        console.log('[SmartBundles] API failed, showing test bundles');
        renderTestBundles(bundleContainer);
      });
    }
  };

  // Test bundles to ensure something always shows
  // Test bundle renderer removed

  // Manual bundle rendering fallback
  function renderBundlesManually(bundles, container) {
    console.log('[SmartBundles] Manually rendering', bundles.length, 'bundles');
    container.classList.add('smart-bundles-loaded');
    container.innerHTML = '';
    
    bundles.slice(0, 2).forEach(bundle => {
      const bundleHtml = `
        <div class="cart-uplift-bundle manual-render">
          <div class="cart-uplift-bundle__content">
            <div class="cart-uplift-bundle__header">
              <h3 class="cart-uplift-bundle__title">${bundle.name || 'Bundle Deal'}</h3>
              <p class="cart-uplift-bundle__savings">${bundle.discount_percent || 10}% off - Save ${bundle.savings_amount || '$10'}</p>
            </div>
            <div class="cart-uplift-bundle__products">
              ${bundle.products ? bundle.products.map(product => `
                <div class="cart-uplift-product">
                  <div class="cart-uplift-product__info">
                    <div class="cart-uplift-product__title">${product.title}</div>
                    <div class="cart-uplift-product__price">$${parseFloat(product.price).toFixed(2)}</div>
                  </div>
                </div>
              `).join('') : ''}
            </div>
            <div class="cart-uplift-bundle__actions">
              <button class="cart-uplift-bundle__cta" onclick="addBundleToCart('${bundle.id}')">Add Bundle to Cart</button>
              ${bundle.discount_code ? `<p class="cart-uplift-bundle__note">Use discount code: <strong>${bundle.discount_code}</strong></p>` : ''}
            </div>
          </div>
        </div>
      `;
      container.innerHTML += bundleHtml;
    });
  }

  function showNoBundlesMessage(container) {
    container.classList.add('smart-bundles-loaded');
    container.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No bundles available for this product.</p>';
  }

  function showErrorMessage(container, error) {
    container.classList.add('smart-bundles-loaded');
    container.innerHTML = `<p style="text-align: center; color: #d73027; padding: 20px;">Unable to load bundles: ${error}</p>`;
  }

  // Global function for manual bundle add to cart
  window.addBundleToCart = function(bundleId) {
    console.log('Adding bundle to cart:', bundleId);
    // This would typically integrate with your cart system
    alert('Bundle functionality coming soon! Bundle ID: ' + bundleId);
  };

  tryInit();
});
</script>

{%- comment -%}
  Ensure the bundle renderer script is available on product pages using this block.
  This is a safe fallback in case the app-embed delayed loader hasn’t run yet.
{%- endcomment -%}
<script src="{{ 'bundle-renderer.js' | asset_url }}" defer></script>
{% endif %}

{% schema %}
{
  "name": "Smart Bundles",
  "target": "section",
  "settings": [
    {
      "type": "checkbox",
      "id": "enable_smart_bundles",
      "label": "Enable Smart Bundles",
      "default": true,
      "info": "Show AI-powered product bundles on this product page"
    },
    {
      "type": "text",
      "id": "bundle_title",
      "label": "Bundle Title",
      "default": "Complete your setup",
      "info": "Title shown above the bundle recommendations"
    },
    {
      "type": "select",
      "id": "bundle_layout",
      "label": "Bundle Layout",
      "options": [
        {
          "value": "horizontal",
          "label": "Horizontal (side by side)"
        },
        {
          "value": "vertical",
          "label": "Vertical (stacked)"
        }
      ],
      "default": "horizontal"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Top margin",
      "default": 20
    },
    {
      "type": "range",
      "id": "margin_bottom", 
      "min": 0,
      "max": 50,
      "step": 5,
      "unit": "px",
      "label": "Bottom margin",
      "default": 20
    }
  ]
}
{% endschema %}
