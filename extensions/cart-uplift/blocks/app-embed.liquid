{% comment %} Cart Uplift – Smart Cart App Embed {% endcomment %}

<link rel="stylesheet" href="{{ 'cart-uplift.css' | asset_url }}">

  {%- comment -%}
    Immediate cart hiding - applied before any JavaScript loads to prevent flash
  {%- endcomment -%}
  <style>
    /* Hide all possible native cart elements immediately */
    .site-header__cart,
    .header__icon--cart,
    .header__cart,
    .cart-link,
    .cart-link__bubble,
    .cart-count-bubble,
    .js-drawer-open-cart,
    [data-action="open-cart"],
    [data-cart-toggle],
    [data-cart-drawer-toggle],
    cart-notification,
    #CartNotification,
    .cart-notification,
    #CartDrawer:not(#cartuplift-cart-popup),
    .cart-drawer:not(#cartuplift-cart-popup),
    .cart-toggle,
    .cart-icon-wrapper,
    .cart-icon,
    .site-nav__cart,
    .header-cart,
    .nav-cart,
    .cart-button,
    .cart-count,
    .minicart-toggle {
      display: none !important;
      visibility: hidden !important;
      opacity: 0 !important;
    }
  </style>

  {%- comment -%}
    Sticky cart style overrides driven by theme settings
    Applies background, text color, badge color, and border radius
  {%- endcomment -%}
  <style id="cartuplift-sticky-style">
    #cartuplift-sticky .cartuplift-sticky-btn,
    .cartuplift-sticky .cartuplift-sticky-btn {
      {% if block.settings.sticky_background_color %}
      background: {{ block.settings.sticky_background_color }} !important;
      {% endif %}
      {% if block.settings.sticky_text_color %}
      color: {{ block.settings.sticky_text_color }} !important;
      {% endif %}
      {% if block.settings.border_radius %}
      border-radius: {{ block.settings.border_radius }}px !important;
      {% endif %}
    }
    /* Ensure icon adopts text color */
    #cartuplift-sticky .cartuplift-sticky-btn svg,
    .cartuplift-sticky .cartuplift-sticky-btn svg {
      {% if block.settings.sticky_text_color %}
      color: {{ block.settings.sticky_text_color }} !important;
      fill: {{ block.settings.sticky_text_color }} !important;
      stroke: {{ block.settings.sticky_text_color }} !important;
      {% endif %}
    }
    /* Override icon-only variant to keep chosen radius */
    #cartuplift-sticky .cartuplift-sticky-btn:has(svg):not(:has(.cartuplift-sticky-count)):not(:has(.cartuplift-sticky-total)),
    .cartuplift-sticky .cartuplift-sticky-btn:has(svg):not(:has(.cartuplift-sticky-count)):not(:has(.cartuplift-sticky-total)) {
      {% if block.settings.border_radius %}
      border-radius: {{ block.settings.border_radius }}px !important;
      {% endif %}
    }
    #cartuplift-sticky .cartuplift-sticky-count,
    .cartuplift-sticky .cartuplift-sticky-count {
      {% if block.settings.count_badge_color %}
      background: {{ block.settings.count_badge_color }} !important;
      {% endif %}
    }
    
    /* Set modal button colors to match sticky cart background */
    :root {
      {% if block.settings.sticky_background_color %}
      --cartuplift-button-color: {{ block.settings.sticky_background_color }};
      --cartuplift-button-hover-color: {{ block.settings.sticky_background_color | color_darken: 15 }};
      --cartuplift-button-focus-shadow: {{ block.settings.sticky_background_color | color_modify: 'alpha', 0.1 }};
      {% endif %}
    }
    /* Preview items styling for theme editor */
    .cartuplift-preview-item {
      opacity: 0.7;
      position: relative;
    }
    .cartuplift-preview-item {
      position: relative;
    }
    .cartuplift-preview-item .cartuplift-item-price-actions {
      position: relative;
    }
    .cartuplift-preview-item .cartuplift-item-price-actions::after {
      content: "PREVIEW";
      position: absolute;
      top: 75%;
      right: 0;
      transform: translateY(-50%);
      background: #00C851;
      color: white;
      font-size: 11px;
      padding: 4px 10px;
      border-radius: 16px;
      font-weight: 600;
      z-index: 10;
      line-height: 1;
      white-space: nowrap;
      box-shadow: 0 2px 6px rgba(0, 200, 81, 0.4);
      border: 1px solid #00A843;
    }
    .cartuplift-progress-text {
      color: #121212 !important;
      font-weight: 500;
      font-size: 14px;
      line-height: 1.4;
    }
    .cartuplift-gift-price {
      border: none !important;
      outline: none !important;
      box-shadow: none !important;
    }
    /* Only remove borders/outlines from the gift price, not the entire gift item */
    .cartuplift-gift-item {
      /* Keep normal styling for consistency, only remove any special gift highlighting */
    }
  </style>

  <script>
    // Preload settings BEFORE loading the main script so it can auto-initialize
    (function(){
      try {
        // Detect Shopify theme editor design mode as early as possible
        var __isDesignMode = !!(window.Shopify && window.Shopify.designMode);

  window.CartUpliftSettings = Object.assign({}, window.CartUpliftSettings || {}, {
          // Cart Behavior (controlled by theme setting in design mode)
          keepCartOpen: __isDesignMode ? {{ block.settings.keep_cart_open | json }} : false,
          
          // Incentives
          incentiveType: {{ block.settings.incentive_type | json }},
          // cart-uplift.js expects these exact keys
          enableFreeShipping: {{ block.settings.enable_free_shipping_progress | json }},
          freeShippingText: {{ block.settings.progress_message | json }},
          freeShippingAchievedText: {{ block.settings.success_message | json }},
          freeShippingMaintainText: {{ block.settings.free_shipping_maintain_message | json }},
          freeShippingThreshold: {{ block.settings.free_shipping_threshold | json }},
                  shippingBarBackgroundColor: {{ block.settings.progress_background_color | json }},
          shippingBarColor: {{ block.settings.progress_bar_color | json }},
          // gift gating (only used when incentive type is gifts/combined)
          // giftThresholds will be set below as a JSON string when applicable

          // Gift & Rewards Settings
          allRewardsAchievedText: {{ block.settings.all_rewards_success_message | json }},
          giftThreshold: {{ block.settings.gift_threshold | json }},
          giftProgressText: {{ block.settings.gift_progress_message | json }},
          giftAchievedText: {{ block.settings.gift_success_message | json }},
          giftPriceText: {{ block.settings.gift_price_text | json }},
          giftValueProgressText: {{ block.settings.gift_value_progress_message | json }},
          giftNoticeText: {{ block.settings.gift_notice_text | json }},

          // Cart Features (enabled when text is not blank)
          discountLinkText: {{ block.settings.discount_link_text | json }},
          enableDiscountCode: {{ block.settings.discount_link_text | json | size }} > 0,
          notesLinkText: {{ block.settings.order_notes_link_text | json }},
          enableNotes: {{ block.settings.order_notes_link_text | json | size }} > 0,

          // Sticky cart (use built-in styles and rendering in cart-uplift.js)
          enableStickyCart: {{ block.settings.enable_sticky_cart | json }},
          cartPosition: {{ block.settings.cart_position | json }},
          stickyCartShowIcon: {{ block.settings.show_cart_icon | json }},
          stickyCartShowCount: {{ block.settings.show_item_count | json }},
          stickyCartShowTotal: {{ block.settings.show_total_price | json }},

          // App behavior
          enableApp: true,
          autoOpenCart: true, // Default to true for customer experience
          designMode: __isDesignMode,
          
          // Currency settings
          shopCurrency: {{ shop.currency | json }},
          moneyFormat: {{ shop.money_format | json }},
          moneyWithCurrencyFormat: {{ shop.money_with_currency_format | json }},
          
          // Product Recommendations
          // Use both keys for compatibility – cart-uplift.js expects recommendationLayout (singular)
          recommendationsLayout: {{ block.settings.recommendations_layout | json }},
          recommendationLayout: {{ block.settings.recommendations_layout | json }},
          // Mark source so API refresh won't override theme editor selection
          recommendationLayoutSource: 'theme',
          recommendationsTitle: {{ block.settings.recommendations_title | json }},
          recommendationsBackgroundColor: {{ block.settings.recommendations_background_color | json }}
        });

        // Notify any listeners immediately that settings have (re)loaded
        try { document.dispatchEvent(new CustomEvent('cartuplift:settings:updated')); } catch (_) {}

        // Set global money format for formatMoney function
        window.CartUpliftMoneyFormat = {{ shop.money_format | json }};

        // Sticky cart settings are now properly configured above in the main settings object

        // In design mode we greatly reduce side-effects so the iframe never triggers X-Frame-Options failures
        if (__isDesignMode) {
          try {
            // Disable analytics / polling style behaviors and any automatic gift auto-add logic later can check this flag
            window.CartUpliftSettings.enableAnalytics = false;
            window.CartUpliftSettings.suppressAutoAdd = true;
            
            // Keep cart open setting is now controlled by theme setting, not forced
            console.info('[CartUplift] Theme editor mode: keepCartOpen =', window.CartUpliftSettings.keepCartOpen);
            
            // Prevent accidental redirects initiated extremely early
            window.addEventListener('click', function(e){
              var t = e.target;
              if (!t) return;
              if (t.closest && t.closest('.cartuplift-checkout-btn, [data-checkout], form[action*="/checkout"], a[href*="/checkout"]')) {
                e.preventDefault();
                e.stopPropagation();
                console.info('[CartUplift] Checkout suppressed in theme editor (design mode).');
              }
            }, true);
          } catch(__e) { console.warn('[CartUplift] Design mode safe-guards partial failure', __e); }
        }

        // Normalize free shipping message placeholder to the token cart-uplift.js replaces
        try {
          const token = `{% raw %}{{ amount }}{% endraw %}`;
          if (typeof window.CartUpliftSettings.freeShippingText === 'string') {
            window.CartUpliftSettings.freeShippingText = window.CartUpliftSettings.freeShippingText.replace('{amount}', token);
          }
        } catch (_) {}

        // Parse combined gift messages (progress | success)
        try {
          const amountToken = `{% raw %}{{ amount }}{% endraw %}`;
          const productToken = `{% raw %}{{ title }}{% endraw %}`;
          const combinedMessage = {{ block.settings.gift_progress_message | json }} || "Spend {amount} more to unlock {product}! | 🎉 {product} unlocked!";
          const [progressMsg, successMsg] = combinedMessage.split('|').map(s => s.trim());
          
          window.CartUpliftSettings.giftProgressText = progressMsg || "Spend {amount} more to unlock {product}!";
          window.CartUpliftSettings.giftAchievedText = successMsg || "🎉 {product} unlocked!";
          
          // Replace placeholders
          if (typeof window.CartUpliftSettings.giftProgressText === 'string') {
            window.CartUpliftSettings.giftProgressText = window.CartUpliftSettings.giftProgressText
              .replace('{amount}', amountToken)
              .replace('{product}', productToken)
              .replace('{title}', productToken); // backward compatibility
          }
          if (typeof window.CartUpliftSettings.giftAchievedText === 'string') {
            window.CartUpliftSettings.giftAchievedText = window.CartUpliftSettings.giftAchievedText
              .replace('{product}', productToken)
              .replace('{title}', productToken); // backward compatibility
          }
        } catch (_) {}

        // Map incentive type to the script's progressBarMode values
        try {
          const type = window.CartUpliftSettings.incentiveType;
          const mode = type === 'gifts' ? 'gift-gating' : (type === 'combined' ? 'combined' : 'free-shipping');
          window.CartUpliftSettings.progressBarMode = mode;
        } catch (_) {}

        // Configure gift gating thresholds only when needed
        try {
          const giftAmount = {{ block.settings.gift_threshold | json }};
          const type = window.CartUpliftSettings.incentiveType;
          // Inject product selection from the theme setting if provided
          // Liquid will output these JS vars safely whether set or not
          {% if block.settings.gift_product %}
          var __giftProductId = {{ block.settings.gift_product.id | json }};
          var __giftProductHandle = {{ block.settings.gift_product.handle | json }};
          var __giftProductTitle = {{ block.settings.gift_product.title | json }};
          var __giftVariantId = {{ block.settings.gift_product.selected_or_first_available_variant.id | json }};
          var __giftVariantTitle = {{ block.settings.gift_product.selected_or_first_available_variant.title | json }};
          var __giftVariantPrice = {{ block.settings.gift_product.selected_or_first_available_variant.price | json }}; // cents
          {% else %}
          var __giftProductId = null;
          var __giftProductHandle = null;
          var __giftProductTitle = null;
          var __giftVariantId = null;
          var __giftVariantTitle = null;
          var __giftVariantPrice = null;
          {% endif %}

          if ((type === 'gifts' || type === 'combined') && Number(giftAmount)) {
            const threshold = {
              id: `gift-${__giftProductId || ('amount-' + Number(giftAmount))}`,
              type: 'product',
              amount: Number(giftAmount),
              title: __giftProductTitle || 'Free Gift',
              productId: __giftProductId,
              productHandle: __giftProductHandle,
              variantId: __giftVariantId,
              variantTitle: __giftVariantTitle,
              price: __giftVariantPrice
            };
            window.CartUpliftSettings.enableGiftGating = true;
            window.CartUpliftSettings.giftThresholds = JSON.stringify([threshold]);
          }
        } catch (_) {}
      } catch (e) {
        console.warn('CartUplift pre-settings failed', e);
      }
    })();
  </script>

  <script>
    // Disable native Shopify theme cart animations
    (function() {
      try {
        // Override any existing cart animation functions
        if (window.theme && window.theme.cart && typeof window.theme.cart.addToCartAnimation === 'function') {
          window.theme.cart.addToCartAnimation = function() { /* disabled */ };
        }
        
        // Disable common animation classes
        const style = document.createElement('style');
        style.textContent = `
          .cart-drawer__item-animate,
          .cart-item-animate,
          .cart-animation,
          .add-to-cart-animation,
          [data-cart-animation] {
            animation: none !important;
            transition: none !important;
            transform: none !important;
          }
        `;
        document.head.appendChild(style);
        
        // Intercept and disable performance measurements that trigger animations
        if (window.performance && window.performance.measure) {
          const originalMeasure = window.performance.measure;
          window.performance.measure = function(name, ...args) {
            if (name && (name.includes('cart') || name.includes('add'))) {
              return; // Skip cart-related performance measurements
            }
            return originalMeasure.apply(this, [name, ...args]);
          };
        }
        
        // Intercept early cart page navigation
        const originalPushState = history.pushState;
        const originalReplaceState = history.replaceState;
        
        history.pushState = function(state, title, url) {
          if (url && url.toString().includes('/cart') && !url.toString().includes('/cart/add')) {
            console.log('🚫 Early cart navigation blocked (pushState)');
            if (window.cartUpliftDrawer) {
              window.cartUpliftDrawer.openDrawer();
            }
            return;
          }
          return originalPushState.apply(this, arguments);
        };
        
        history.replaceState = function(state, title, url) {
          if (url && url.toString().includes('/cart') && !url.toString().includes('/cart/add')) {
            console.log('🚫 Early cart navigation blocked (replaceState)');
            if (window.cartUpliftDrawer) {
              window.cartUpliftDrawer.openDrawer();
            }
            return;
          }
          return originalReplaceState.apply(this, arguments);
        };

        console.log('🚫 Native Shopify cart animations disabled');
      } catch (e) {
        console.warn('Failed to disable native animations:', e);
      }
    })();
  </script>

  {%- comment -%} Cache-busted version to ensure fresh schema loads {%- endcomment -%}
  <script src="{{ 'cart-uplift.js' | asset_url }}?v=theme-editor-autoopen-2025-09-25" defer></script>
  <script src="{{ 'bundle-renderer.js' | asset_url }}?v=theme-editor-autoopen-2025-09-25" defer></script>

  <script>
    // Post-load configuration and resilience
    document.addEventListener('DOMContentLoaded', function() {
      try {
        const __isDesignMode = !!(window.Shopify && window.Shopify.designMode);

        // If the drawer didn't auto-init (e.g., due to timing), initialize it now
        if (!window.cartUpliftDrawer && window.CartUpliftDrawer && window.CartUpliftSettings) {
          try {
            window.cartUpliftDrawer = new window.CartUpliftDrawer(window.CartUpliftSettings);
          } catch(initErr) {
            console.error('[CartUplift] Drawer init failed', initErr);
          }
        }
        // Notify of settings (for late listeners)
        document.dispatchEvent(new CustomEvent('cartuplift:settings:updated'));

        // Theme editor convenience: Auto-open cart when settings change
        if (__isDesignMode && window.cartUpliftDrawer) {
          console.info('[CartUplift] Theme editor: Setting up auto-open on settings changes');
          
          // Listen for Shopify theme editor events
          if (window.Shopify && window.Shopify.designMode) {
            // Auto-open cart every few seconds in design mode for editing convenience
            let editorAutoOpenInterval = setInterval(() => {
              if (window.cartUpliftDrawer && !window.cartUpliftDrawer.isOpen) {
                console.info('[CartUplift] Theme editor: Auto-opening cart for editing convenience');
                window.cartUpliftDrawer.openDrawer();
              }
            }, 3000); // Every 3 seconds
            
            // Clean up interval when not in design mode
            const checkDesignMode = () => {
              if (!window.Shopify || !window.Shopify.designMode) {
                clearInterval(editorAutoOpenInterval);
              }
            };
            setTimeout(checkDesignMode, 10000);
          }
        }

        // Only hide the native theme cart outside of design mode to avoid confusing merchants in the editor
        if (!__isDesignMode) {
          // Cart elements are now hidden via immediate CSS at page load
        } else {
          console.info('[CartUplift] Design mode: preserving native cart UI for editor clarity.');
        }

        // Wait for the main drawer to be ready, then render sticky and disable theme cart
        if (!__isDesignMode) {
          const start = Date.now();
          const readyTimer = setInterval(() => {
            if (window.cartUpliftDrawer) {
              clearInterval(readyTimer);
              try {
                if (window.CartUpliftSettings.enableStickyCart && typeof window.cartUpliftDrawer.createStickyCart === 'function') {
                  window.cartUpliftDrawer.createStickyCart();
                }
                if (typeof window.cartUpliftDrawer.preventThemeCartUplift === 'function') {
                  window.cartUpliftDrawer.preventThemeCartUplift();
                }
              } catch (err) {
                console.warn('CartUplift post-ready actions failed', err);
              }

              // Fallback: if sticky still missing after initial render, try again shortly
              setTimeout(() => {
                try {
                  if (
                    window.CartUpliftSettings?.enableStickyCart &&
                    typeof window.cartUpliftDrawer?.createStickyCart === 'function' &&
                    !document.getElementById('cartuplift-sticky')
                  ) {
                    window.cartUpliftDrawer.createStickyCart();
                  }
                } catch (_) {}
              }, 600);
            } else if (Date.now() - start > 5000) {
              clearInterval(readyTimer);
            }
          }, 100);
        } else {
          console.info('[CartUplift] Design mode: skipped sticky cart timers & theme cart suppression.');
        }

        // Optional analytics hooks
        if (window.CartUpliftSettings && window.CartUpliftSettings.enableAnalytics) {
          document.addEventListener('cartuplift:opened', function() {
            if (typeof gtag !== 'undefined') {
              gtag('event', 'view_cart', { event_category: 'Cart Uplift', event_label: 'Cart Drawer Opened' });
            }
          });
          document.addEventListener('cartuplift:item_added', function(e) {
            if (typeof gtag !== 'undefined') {
              gtag('event', 'add_to_cart', { event_category: 'Cart Uplift', event_label: 'Item Added', value: e.detail?.price });
            }
          });
        }
      } catch (error) {
        console.error('Cart Uplift App Embed failed to initialize:', error);
      }
    });

    // Comprehensive cart link interception - final fallback
    document.addEventListener('click', function(e) {
      // Check if the clicked element or any parent is a cart link
      let element = e.target;
      while (element && element !== document) {
        const href = element.getAttribute('href');
        if (href && (href === '/cart' || href.includes('/cart?') || href.includes('/cart#'))) {
          console.log('🚫 Final fallback - cart link blocked:', element);
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          
          if (window.cartUpliftDrawer) {
            window.cartUpliftDrawer.openDrawer();
          }
          return false;
        }
        element = element.parentElement;
      }
    }, true);
  </script>

  {%- comment -%}
    Hidden probe to let Shopify render official dynamic checkout buttons (PayPal, Shop Pay).
    We'll relocate these into the cart drawer when it opens so clicks use Shopify's checkout flow.
  {%- endcomment -%}
  <div id="cartuplift-payment-probe" style="position:absolute;left:-9999px;top:-9999px;opacity:0;pointer-events:none;">
    <div class="additional-checkout-buttons" data-shopify="payment-button"></div>
  </div>

{% schema %}
{
  "name": "Cart Uplift - Smart Cart",
  "target": "body",
  "settings": [
    {
      "type": "header",
      "content": "Theme editor"
    },
    {
      "type": "checkbox",
      "id": "keep_cart_open",
      "label": "Keep cart open in editor",
      "default": false
    },
    {
      "type": "select",
      "id": "incentive_type",
      "label": "Strategy",
      "options": [
        {
          "value": "free_shipping",
          "label": "Free Shipping Progress"
        },
        {
          "value": "gifts",
          "label": "Free Gifts & Rewards"
        },
        {
          "value": "combined",
          "label": "Both (Free Shipping + Gifts)"
        }
      ],
      "default": "free_shipping"
    },
    {
      "type": "header",
      "content": "Free shipping"
    },
    {
      "type": "checkbox",
      "id": "enable_free_shipping_progress",
      "label": "Show progress",
      "default": true
    },
    {
      "type": "number",
      "id": "free_shipping_threshold",
      "label": "Threshold ($)",
      "default": 100
    },
    {
      "type": "text",
      "id": "progress_message",
      "label": "Progress text",
      "default": "You're {amount} away from free shipping!"
    },
    {
      "type": "text",
      "id": "success_message",
      "label": "Success text",
      "default": "You've unlocked free shipping!"
    },
    {
      "type": "color",
      "id": "progress_bar_color",
      "label": "Bar color",
      "default": "#00d4aa"
    },
    {
      "type": "header",
      "content": "Gifts & rewards"
    },
    {
      "type": "number",
      "id": "gift_threshold",
      "label": "Threshold ($)",
      "default": 150
    },
    {
      "type": "product",
      "id": "gift_product",
      "label": "Gift product"
    },
    {
      "type": "text",
      "id": "gift_progress_message", 
      "label": "Messages (progress | success)",
      "default": "Spend {amount} more to unlock {product}! | 🎉 {product} unlocked!"
    },
    {
      "type": "text",
      "id": "gift_value_message",
      "label": "Value text",
      "default": "You're saving {value}!"
    },
    {
      "type": "text",
      "id": "gift_price_text",
      "label": "Price label",
      "default": "FREE"
    },
    {
      "type": "text",
      "id": "all_rewards_success_message",
      "label": "All rewards text",
      "default": "✓ You've saved {value}!"
    },
    {
      "type": "header",
      "content": "Cart features"
    },
    {
      "type": "text",
      "id": "discount_link_text",
      "label": "Discount link",
      "default": "+ Got a promotion code?"
    },
    {
      "type": "text",
      "id": "order_notes_link_text",
      "label": "Order notes link",
      "default": "+ Add order notes"
    },
    {
      "type": "header",
      "content": "Sticky cart"
    },
    {
      "type": "checkbox",
      "id": "enable_sticky_cart",
      "label": "Enable sticky button",
      "default": true
    },
    {
      "type": "select",
      "id": "cart_position",
      "label": "Position",
      "options": [
        {
          "value": "bottom-right",
          "label": "Bottom Right"
        },
        {
          "value": "bottom-left",
          "label": "Bottom Left"
        },
        {
          "value": "right-middle",
          "label": "Middle Right"
        },
        {
          "value": "left-middle",
          "label": "Middle Left"
        },
        { "value": "top-right", "label": "Top Right" },
        { "value": "top-left", "label": "Top Left" }
      ],
      "default": "bottom-right"
    },
    {
      "type": "select",
      "id": "sticky_cart_display",
      "label": "Content",
      "options": [
        {
          "value": "icon",
          "label": "Icon only"
        },
        {
          "value": "icon,count",
          "label": "Icon + Count"
        },
        {
          "value": "icon,total",
          "label": "Icon + Total"
        },
        {
          "value": "icon,count,total",
          "label": "Icon + Count + Total"
        }
      ],
      "default": "icon,count"
    },
    {
      "type": "color",
      "id": "sticky_background_color",
      "label": "Background",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "sticky_text_color",
      "label": "Text",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "count_badge_color",
      "label": "Badge",
      "default": "#ff0000"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Corner radius",
      "min": 0,
      "max": 50,
      "step": 5,
      "default": 25,
      "unit": "px"
    },
    {
      "type": "header",
      "content": "Recommendations"
    },
    {
      "type": "text",
      "id": "recommendations_title",
      "label": "Title", 
      "default": "You might also like"
    },
    {
      "type": "select",
      "id": "recommendations_layout",
      "label": "Layout",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "carousel",
          "label": "Carousel"
        },
        {
          "value": "list",
          "label": "List"
        },
        {
          "value": "grid",
          "label": "Grid"
        }
      ],
      "default": "carousel"
    },
    {
      "type": "color",
      "id": "recommendations_background_color",
      "label": "Background",
      "default": "#ffffff" 
    }
  ]
}
{% endschema %}