{% comment %} Cart Uplift â€“ Enhanced App Embed (6-setting compliant) {% endcomment %}

<link rel="stylesheet" href="{{ 'cart-uplift.css' | asset_url }}">

  <script>
    (function() {
  // Expose shop domain early for analytics & API calls
  window.CartUpliftShop = {{ shop.permanent_domain | json }};
      // Base defaults (will be overridden by backend settings)
      const defaults = {
        // Theme embed settings (frequently changed)
        autoOpenCart: true,
        enableFreeShipping: true,
        freeShippingThreshold: 0,
        // Neutral defaults to avoid green; real colors come from backend or theme detection in JS
        buttonColor: "#000000",
        textColor: "#1a1a1a",

        // Backend general settings (configured once)
        enableApp: true,
        enableStickyCart: true,
        showOnlyOnCartPage: false,
        cartPosition: "bottom-right",
        cartIcon: "cart",
        backgroundColor: "#ffffff",
        freeShippingText: "Spend {amount} more for free shipping!",
        freeShippingAchievedText: "ðŸŽ‰ Free shipping unlocked!",

        // Features
  enableRecommendations: true,
  // Match backend normalization (horizontal -> row)
  recommendationLayout: "horizontal",
        maxRecommendations: 3,
        enableAddons: false,
        enableDiscountCode: true,
        enableNotes: false,
        enableExpressCheckout: true,

        // Advanced
        drawerWidth: 540,
        borderRadius: 8,
  showBrandBadge: true,
        enableQuantitySelectors: true,
        enableItemRemoval: true,
  enableAnalytics: false
      };

      // Simple theme embed - always enabled
      const isEnabled = true;

      if (!isEnabled) {
        console.warn('ðŸ›’ Cart Uplift: Disabled via theme settings');
        return;
      }

      console.log('ðŸ›’ Cart Uplift: Starting initialization...');
      console.log('ðŸ›’ Cart Uplift: Settings defaults:', defaults);

      // Fetch backend settings from your app's API
      let backendSettings = {};
      
      // Try to get backend settings (this will be from your app's management page)
  const shopDomain = '{{ shop.permanent_domain }}';
  // Use app proxy to fetch settings to ensure storefront accessibility
  const apiUrl = `/apps/cart-uplift/api/settings?shop=${encodeURIComponent(shopDomain)}`;
      
      // Fire-and-forget heartbeat to mark embed enabled in backend
      try {
        fetch('/apps/cart-uplift/api/embed-heartbeat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ shop: shopDomain })
        }).catch(() => {});
      } catch (e) {}

      fetch(apiUrl)
        .then(response => {
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}`);
          }
          return response.json();
        })
        .then(data => {
          console.log('ðŸ›’ Cart Uplift: Backend settings loaded:', data);
          backendSettings = data || {};
          // Merge settings: defaults < backendSettings (no theme override since all config is in backend)
          window.CartUpliftSettings = Object.assign({}, defaults, backendSettings);
          
          console.log('ðŸ›’ Cart Uplift: Final settings:', window.CartUpliftSettings);
          
          // Initialize cart if enabled
          if (window.CartUpliftSettings.enableApp) {
            console.log('ðŸ›’ Cart Uplift: App enabled, initializing drawer...');
            // Create new cart uplift instance
            if (window.CartUpliftDrawer) {
              window.cartUpliftDrawer = new window.CartUpliftDrawer(window.CartUpliftSettings);
              console.log('ðŸ›’ Cart Uplift: Drawer initialized successfully');
            } else {
              console.error('ðŸ›’ Cart Uplift: CartUpliftDrawer class not found');
            }
          } else {
            console.warn('ðŸ›’ Cart Uplift: App is disabled in settings');
          }
        })
        .catch(error => {
          console.error('ðŸ›’ Cart Uplift: API call failed:', error);
          // Fallback to defaults only
          window.CartUpliftSettings = defaults;
          
          console.log('ðŸ›’ Cart Uplift: Using fallback settings:', window.CartUpliftSettings);
          
          // Initialize cart if enabled
          if (window.CartUpliftSettings.enableApp) {
            console.log('ðŸ›’ Cart Uplift: App enabled (fallback), initializing drawer...');
            // Create new cart uplift instance
            if (window.CartUpliftDrawer) {
              window.cartUpliftDrawer = new window.CartUpliftDrawer(window.CartUpliftSettings);
              console.log('ðŸ›’ Cart Uplift: Drawer initialized successfully (fallback)');
            } else {
              console.error('ðŸ›’ Cart Uplift: CartUpliftDrawer class not found (fallback)');
            }
          } else {
            console.warn('ðŸ›’ Cart Uplift: App is disabled in fallback settings');
          }
        });

      // Set money format
      window.CartUpliftMoneyFormat = {{ shop.money_format | json }};
    })();
  </script>

  <script src="{{ 'cart-uplift.js' | asset_url }}" defer></script>

  <script>
    // Analytics will be enabled based on backend settings
    document.addEventListener('DOMContentLoaded', function() {
      if (window.CartUpliftSettings && window.CartUpliftSettings.enableAnalytics) {
        document.addEventListener('cartuplift:opened', function() {
          if (typeof gtag !== 'undefined') {
            gtag('event', 'view_cart', { event_category: 'Cart Uplift', event_label: 'Cart Drawer Opened' });
          }
        });
        document.addEventListener('cartuplift:item_added', function(e) {
          if (typeof gtag !== 'undefined') {
            gtag('event', 'add_to_cart', { event_category: 'Cart Uplift', event_label: 'Item Added', value: e.detail.price });
          }
        });
      }
    });
  </script>

  {%- comment -%}
    Hidden probe to let Shopify render official dynamic checkout buttons (PayPal, Shop Pay).
    We'll relocate these into the cart drawer when it opens so clicks use Shopify's checkout flow.
  {%- endcomment -%}
  <div id="cartuplift-payment-probe" style="position:absolute;left:-9999px;top:-9999px;opacity:0;pointer-events:none;">
    <div class="additional-checkout-buttons" data-shopify="payment-button"></div>
  </div>

{% schema %}
{
  "name": "Cart Uplift - Live App",
  "target": "body",
  "settings": []
}
{% endschema %}