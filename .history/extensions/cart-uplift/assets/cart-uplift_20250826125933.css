getVariantOptionsHTML(item) {
  // First check if we have properly structured options
  if (item.options_with_values && item.options_with_values.length > 0) {
    return item.options_with_values
      .filter(option => option.value && option.value !== 'Default Title')
      .map(option => `<div class="cartuplift-item-variant">${option.name}: ${option.value}</div>`)
      .join('');
  }
  
  // If we have variant_title like "Black / 10"
  if (item.variant_title && item.variant_title !== 'Default Title') {
    // Split by forward slash with optional spaces
    const options = item.variant_title.split(/\s*\/\s*/);
    
    // If we have multiple parts, try to identify what they are
    if (options.length > 1) {
      return options.map((option, index) => {
        // Try to intelligently label the options
        let label = '';
        
        // Check if it's a color (common color names or contains common color words)
        const colorPattern = /black|white|red|blue|green|yellow|grey|gray|brown|navy|pink|purple|orange|beige|cream/i;
        // Check if it's a size (contains numbers or size indicators)
        const sizePattern = /^\d+(\.\d+)?$|^(XS|S|M|L|XL|XXL|XXXL|\d+)$/i;
        
        if (colorPattern.test(option)) {
          label = 'Color';
        } else if (sizePattern.test(option)) {
          label = 'Size';
        } else if (index === 0) {
          label = 'Option 1';
        } else {
          label = 'Option 2';
        }
        
        return `<div class="cartuplift-item-variant">${label}: ${option}</div>`;
      }).join('');
    }
    
    // Single variant option
    return `<div class="cartuplift-item-variant">${item.variant_title}</div>`;
  }
  
  // Check if item has individual properties for color/size
  let variants = [];
  
  // Some Shopify themes provide these separately
  if (item.variant_options) {
    item.variant_options.forEach((option, index) => {
      if (option && option !== 'Default Title') {
        // Try to determine the label based on position or content
        let label = item.options && item.options[index] ? item.options[index] : `Option ${index + 1}`;
        variants.push(`<div class="cartuplift-item-variant">${label}: ${option}</div>`);
      }
    });
  }
  
  // Alternative: check for properties directly on the item
  if (item.properties && typeof item.properties === 'object') {
    Object.entries(item.properties).forEach(([key, value]) => {
      if (value && key !== '__proto__') {
        variants.push(`<div class="cartuplift-item-variant">${key}: ${value}</div>`);
      }
    });
  }
  
  return variants.join('') || '';
}